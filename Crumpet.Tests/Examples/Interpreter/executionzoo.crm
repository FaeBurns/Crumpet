func void main(string[] args){
    int i = 0 + 1 + 2;
    i = 0;
    while(i < count(args)){
        println(args[i]);
        
        i = i + 1;
    }
    
    string inVal;
    inVal = input();
    println(input());
    int index;
    index = pInt(inVal);
    println("Outputting value at index " + pString(index) + " " + args[index]);
    
    assert(index == 0, "incorrect value received from input. Received " + inVal + " expected 0");
    test(index);
    test(inVal);
    
    int[] arrayTest = list(int, 5);
    for (int j = 0; j < count(arrayTest); j++){
        arrayTest[j] = j * 2;
        println("step " + pString(j));
    }
    
    BREAK();
    
    assert(count(arrayTest) == 5);
    assert(arrayTest[0] == 0);
    assert(arrayTest[1] == 2);
    assert(arrayTest[2] == 4);
    assert(arrayTest[3] == 6);
    assert(arrayTest[4] == 8);
    
    assert(true);
    assert(true == true);
    assert(false != true);
    assert(!(false == true));
    
    // chaining
    float addResult = addTwo(returnTest1(), returnTest2());
    assert(addResult == 7);
    
    NestedLoops();
    TestReferences();
    TestWeirdLoopThingy();
    returnNullTest();
}

func void test(int a){
    println("test int: " + pString(a));
}

func void test(string a){
    println("test string " + a);
}

func float returnTest1(){
    return 3;
}

func float returnTest2(){
    return 4;
}

func float addTwo(float a, float b){
    return a + b;
}

func void NestedLoops(){
    int total = 0;
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 5; j++){
            if (total % 5 == 0){
                println("Skipping at " + total);
            }
            
            total++;
        }    
    }
    
    println("Again but with continue");
    total = 0;
    int realTotal = 0;
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 5; j++){
            if (realTotal % 5 == 0){
                println("Skipping at " + realTotal + ", " + total);
                realTotal++;
                continue;
            }
            realTotal++;
            total++;
        }
    }

    // for every 5 realTotal has increased by, total should have increased by 4    
    assert(realTotal == 50);
    assert(total == 40);
    
    total = 0;
    while(true){
        if (total == 30){
            break;
        }
        total++;
    }
    
    assert(total == 30);
}

func void TestReferences(){
    int a = 5;
    TestModifyReferenceInt(&a);
    assert(a == 10);
    int b = 20;
    int c = 30;
    
    int[] array = list(int, 3);
    
    // assert that this does not change
    TestModifyArray(array);
    assert(array[0] == 0);
    assert(array[1] == 0);
    assert(array[2] == 0);
    
    TestModifyReferenceArray(&array);
    assert(array[0] == 100);
    assert(array[1] == 200);
    assert(array[2] == 300);
}

func void TestModifyReferenceInt(int* ref){
    *ref = *ref * 2;
}

func void TestModifyArray(int[] array){
    array[0] = 10;
    array[1] = 20;
    array[2] = 30;
}

func void TestModifyReferenceArray(int[]* array){
    *array[0] = 100;
    *array[1] = 200;
    *array[2] = 300;
}

func void TestWeirdLoopThingy(){
    int i;
    try{
        for(i = 0; i < 10; i++){
            TestWeirdLoopThingyInner(i);
        }
    }
    catch e{
        println("Successfully caught exception: " + e);
    }
    assert(i == 5);
}

func void TestWeirdLoopThingyInner(int i){
    if (i == 5){
        break;
    }
}

func string* returnNullTest(){
    return NULL;
}