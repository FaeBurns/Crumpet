struct LinkedList<T>{
    LinkedListNode<T>* root;
    int count;
}

struct LinkedListNode<T>{
    T value;
    LinkedList<T>* list;
    LinkedListNode<T>* next;
}

func void main(){
    LinkedList<string> list;
    LLAdd<string>(&list, "one");
    LLAdd<string>(&list, "two");
    LLAdd<string>(&list, "three");
    
    LLPrint<string>(&list);
    
    assert(list.count == 3);
    
    assert(LLGet<string>(&list, 0) == "one");
    assert(LLGet<string>(&list, 1) == "two");
    assert(LLGet<string>(&list, 2) == "three");
    
    LLPrint<string>(&list);
    
    println("done");
}

func void TestNullEquality(){
    LinkedList<string>* ptr;
    assert(ptr == NULL);
    LinkedList<string> list;
    ptr = &list;
    assert(ptr != NULL);
}

func void LLAdd<T>(LinkedList<T>* list, T value){
    // check that incrementation works on inset values
    int count = list->count;
    list->count++;
    assert(list->count == count + 1);
    
    // if the list is empty
    if (list->root == NULL){
        // create a node, set it as the root, then return
        LinkedListNode<T> node;
        node.value = value;
        node.list = &list;
        list->root = node;
        return;
    }    
    
    LinkedListNode<T>* last = null;
    LinkedListNode<T>* current = list->root;
    while(current != NULL){
        last = current;
        current = current->next;
    }
    
    LinkedListNode<T> newNode;
    newNode.value = value;
    newNode.list = list;
    last->next = &newNode; // set next on the last element
}

func T LLGet<T>(LinkedList<T>* list, int index){
    if (index >= list->count || index < 0){
        throw("Out of Bounds");
    }
    
    int i = 0;
    LinkedListNode<T>* current = list->root;
    while(current != NULL){
        if (i == index)
        {
            return current->value; 
        }
        current = current->next;
        i++;
    }
    
    assert(false);
}

func void LLPrint<T>(LinkedList<T>* list){
    int i = 0;
    LinkedListNode<T>* current = list->root;
    while(current != NULL){
        println("Entry[" + i + "]: " + current->value);
        current = current->next;
        i++;
    }
}

func void LLRemove<T>(LinkedList<T>* list, int index){
    if (index >= list.count || index < 0){
        throw("Out of Bounds");
    }
    
    int i = 0;
    LinkedListNode<T>* current = list->root;
    LinkedListNode<T>* last = NULL;
    while(current != NULL){
        if (i == index){
            if (last == NULL){
                list->root = current;
            }
            else{
                last->next = current;
            }
        }
        last = current;
        curret = current->next;
        i++;
    }
}